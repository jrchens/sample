<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">

    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <property name="securityManager" ref="securityManager" />
        <!-- override these for application-specific URLs if you like: -->
        <!-- <property name="loginUrl" value="/" /> -->
        <!-- <property name="loginUrl" value="/login.jsp" /> -->
        <!-- <property name="successUrl" value="/home.jsp"/> -->
        <!-- <property name="unauthorizedUrl" value="/unauthorized.jsp"/> -->
        <!-- The 'filters' property is not necessary since any declared javax.servlet.Filter 
            bean -->
        <!-- defined will be automatically acquired and available via its 
            beanName in chain -->
        <!-- definitions, but you can perform instance overrides or name 
            aliases here if you like: -->
        <!-- <property name="filters"> <util:map> <entry key="anAlias" value-ref="someFilter"/> 
            </util:map> </property> -->
        <property name="filterChainDefinitions">
            <value>
                /login = anon
                /** = authc
            </value>
        </property>
    </bean>

    <!-- Define any javax.servlet.Filter beans you want anywhere in this 
        application context. -->
    <!-- They will automatically be acquired by the 'shiroFilter' bean above 
        and made available -->
    <!-- to the 'filterChainDefinitions' property. Or you can manually/explicitly 
        add them -->
    <!-- to the shiroFilter's 'filters' Map if desired. See its JavaDoc for 
        more details. -->
    <!-- <bean id="someFilter" class="..."/> -->
    <!-- <bean id="anotherFilter" class="..."> ... </bean> -->

    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <!-- Single realm app. If you have multiple realms, use the 'realms' 
            property instead. -->
        <property name="realm" ref="myRealm" />
        <!-- By default the servlet container sessions will be used. Uncomment 
            this line to use shiro's native sessions (see the JavaDoc for more): -->
        <property name="sessionMode" value="native" />
    </bean>
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

    <!-- Define the Shiro Realm implementation you want to use to connect 
        to your back-end -->
    <!-- security datasource: -->
    <bean id="myRealm" class="org.apache.shiro.realm.jdbc.JdbcRealm">
        <property name="dataSource" ref="dataSource"></property>
        <property name="authenticationQuery" value="select password from sys_user where username = ?"></property>
        <property name="userRolesQuery" value="select rolename from sys_user_role where username = ?"></property>
        <property name="permissionsQuery" value="select permission_code from sys_role_permission where rolename = ?"></property>
        <property name="permissionsLookupEnabled" value="false"></property>
        <!-- <property name="saltStyle" value="COLUMN"></property> -->
    </bean>

    <!-- Enable Shiro Annotations for Spring-configured beans. Only run after -->
    <!-- the lifecycleBeanProcessor has run: -->
    <!-- <bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" 
        depends-on="lifecycleBeanPostProcessor"/> -->
    <!-- <bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"> -->
    <!-- <property name="securityManager" ref="securityManager"/> -->
    <!-- </bean> -->

</beans>